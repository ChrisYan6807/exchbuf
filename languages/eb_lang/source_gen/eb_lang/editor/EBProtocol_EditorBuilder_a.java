package eb_lang.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.openapi.editor.menus.transformation.SPropertyInfo;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.SPropertyAccessor;
import jetbrains.mps.nodeEditor.cellMenu.SPropertySubstituteInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import jetbrains.mps.lang.core.behavior.PropertyAttribute__BehaviorDescriptor;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.openapi.editor.update.AttributeKind;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import javax.swing.JButton;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JFileChooser;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import java.util.Deque;
import jetbrains.mps.internal.collections.runtime.LinkedListSequence;
import java.util.LinkedList;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import javax.xml.parsers.ParserConfigurationException;
import java.io.IOException;
import org.xml.sax.SAXException;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.openapi.editor.menus.transformation.SNodeLocation;
import jetbrains.mps.openapi.editor.cells.DefaultSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SEmptyContainmentSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SChildSubstituteInfo;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SReferenceLink;

/*package*/ class EBProtocol_EditorBuilder_a extends AbstractEditorBuilder {
  private static final Logger LOG = LogManager.getLogger(EBProtocol_EditorBuilder_a.class);
  @NotNull
  private SNode myNode;

  public EBProtocol_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createCollection_0();
  }

  private EditorCell createCollection_0() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_peo863_a");
    editorCell.setBig(true);
    setCellContext(editorCell);
    editorCell.addEditorCell(createCollection_1());
    editorCell.addEditorCell(createJComponent_0());
    editorCell.addEditorCell(createConstant_1());
    editorCell.addEditorCell(createConstant_2());
    editorCell.addEditorCell(createRefNodeList_0());
    return editorCell;
  }
  private EditorCell createCollection_1() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_peo863_a0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(createConstant_0());
    editorCell.addEditorCell(createProperty_0());
    return editorCell;
  }
  private EditorCell createConstant_0() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Protocol");
    editorCell.setCellId("Constant_peo863_a0a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_0() {
    getCellFactory().pushCellContext();
    try {
      final SProperty property = PROPS.name$MnvL;
      getCellFactory().setPropertyInfo(new SPropertyInfo(myNode, property));
      EditorCell_Property editorCell = EditorCell_Property.create(getEditorContext(), new SPropertyAccessor(myNode, property, false, false), myNode);
      editorCell.setDefaultText("<no name>");
      editorCell.setCellId("property_name");
      editorCell.setSubstituteInfo(new SPropertySubstituteInfo(editorCell, property));
      setCellContext(editorCell);
      Iterable<SNode> propertyAttributes = SNodeOperations.ofConcept(new IAttributeDescriptor.AllAttributes().list(myNode), CONCEPTS.PropertyAttribute$Gb);
      Iterable<SNode> currentPropertyAttributes = Sequence.fromIterable(propertyAttributes).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return Objects.equals(PropertyAttribute__BehaviorDescriptor.getProperty_id1avfQ4BBzOo.invoke(it), property);
        }
      });
      if (Sequence.fromIterable(currentPropertyAttributes).isNotEmpty()) {
        EditorManager manager = EditorManager.getInstanceFromContext(getEditorContext());
        return manager.createNodeRoleAttributeCell(Sequence.fromIterable(currentPropertyAttributes).first(), AttributeKind.PROPERTY, editorCell);
      } else
      return editorCell;
    } finally {
      getCellFactory().popCellContext();
    }
  }
  private EditorCell createJComponent_0() {
    EditorCell editorCell = EditorCell_Component.createComponentCell(getEditorContext(), myNode, _QueryFunction_JComponent_peo863_a1a(), "JComponent_peo863_b0");
    editorCell.setCellId("JComponent_peo863_b0_0");
    return editorCell;
  }
  private JComponent _QueryFunction_JComponent_peo863_a1a() {
    final SNode protocolRootASTNode = myNode;

    JButton button = new JButton("Import DeutscheBörse/EuroNext layout XML file");
    button.setBackground(Color.WHITE);
    button.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent p1) {
        final JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
          Runnable runnable = new Runnable() {
            @Override
            public void run() {
              String path = chooser.getSelectedFile().getPath();
              try {
                LoggingRuntime.logMsgView(Level.DEBUG, "selected path: " + path, EBProtocol_EditorBuilder_a.class, null, null);
                DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
                DocumentBuilder db = dbf.newDocumentBuilder();
                Document doc = db.parse(chooser.getSelectedFile());
                Element rootNode = doc.getDocumentElement();
                LoggingRuntime.logMsgView(Level.DEBUG, "document root name: " + rootNode.getNodeName(), EBProtocol_EditorBuilder_a.class, null, null);
                if (rootNode.getNodeName() == "Model") {
                  String market = rootNode.getAttribute("name");
                  String version = rootNode.getAttribute("version");
                  String subVersion = rootNode.getAttribute("subVersion");
                  String buildNumber = rootNode.getAttribute("buildNumber");

                  // clear all child node
                  SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW).clear();

                  SNode versionComment = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24169a5L, "eb_lang.structure.EBComment"));
                  SPropertyOperations.assign(versionComment, PROPS.value$wjFT, String.format("Deutsche Börse -- market: %s, version: %s, subVersion: %s, buildNumber: %s", market, version, subVersion, buildNumber));
                  ListSequence.fromList(SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW)).addElement(versionComment);
                  ListSequence.fromList(SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW)).addElement(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3cfeL, "eb_lang.structure.EBEmptyStatement")));

                  NodeList dataTypesList = doc.getElementsByTagName("DataTypes");
                  NodeList structuresList = doc.getElementsByTagName("Structures");

                  // date types, should be only one "<DataTypes>"
                  for (int idx = 0; idx < dataTypesList.getLength(); ++idx) {
                    NodeList typeList = dataTypesList.item(idx).getChildNodes();
                    for (int i = 0; i < typeList.getLength(); ++i) {
                      Node dataTypeNode = typeList.item(i);
                      if (dataTypeNode.getNodeType() == Node.ELEMENT_NODE) {
                        Element ele = (Element) dataTypeNode;
                        String name = ele.getAttribute("name");
                        String type = ele.getAttribute("type");
                        String rootType = ele.getAttribute("rootType");
                        LoggingRuntime.logMsgView(Level.DEBUG, String.format("DataType: %s", name), EBProtocol_EditorBuilder_a.class, null, null);
                        if (rootType.equals("String")) {
                          if (name.equals("char")) {
                            // skip char definition
                            continue;
                          }

                          String sizeStr = ele.getAttribute("size");
                          if (sizeStr.length() > 0) {
                            // for the String without size, they are abstract type, do not create AST node for them
                            // todo there is a "string enum" type as below, very few of them.
                            // <DataType name="MsgType" type="String" rootType="String" numericID="35"  package="eti_Cash" size="3" description="" range="\x01-\x7E" noValue="0x00">       
                            //   <ValidValue name="Heartbeat" value="0" description="Heartbeat"/>   
                            //   <ValidValue name="TestRequest" value="1" description="TestRequest"/>
                            //   <ValidValue name="Reject" value="3" description="Reject"/>
                            //   <ValidValue name="Logout" value="5" description="Logout"/>
                            //   ...
                            // </DataType>
                            int size = Integer.parseInt(sizeStr);
                            String range = ele.getAttribute("range");
                            String noValue = ele.getAttribute("noValue");
                            if (type.equals("char")) {
                              // char enum type
                              SNode enumNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3d0dL, "eb_lang.structure.EBEnum"));
                              SLinkOperations.setTarget(enumNode, LINKS.type$_ySl, SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3d15L, "eb_lang.structure.EBChar")));
                              SPropertyOperations.assign(enumNode, PROPS.name$MnvL, name);

                              NodeList validValueList = ele.getChildNodes();
                              for (int v = 0; v < validValueList.getLength(); ++v) {
                                if (validValueList.item(v).getNodeType() == Node.ELEMENT_NODE) {
                                  Element valueEle = (Element) validValueList.item(v);
                                  String valueName = valueEle.getAttribute("name");
                                  String valueValue = valueEle.getAttribute("value");
                                  SNode kvPair = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3d1dL, "eb_lang.structure.EBIntKVPair"));
                                  SPropertyOperations.assign(kvPair, PROPS.name$MnvL, valueName);

                                  assert valueValue.length() == 1;
                                  SNode literal = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3d18L, "eb_lang.structure.EBCharLiteral"));
                                  SPropertyOperations.assign(literal, PROPS.value$_s5n, valueValue);
                                  SLinkOperations.setTarget(kvPair, LINKS.value$_yQp, literal);
                                  ListSequence.fromList(SLinkOperations.getChildren(enumNode, LINKS.values$_zmn)).addElement(kvPair);

                                  ListSequence.fromList(SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW)).addElement(enumNode);
                                }
                              }

                            } else {
                              SNode fixedStr = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24124b5L, "eb_lang.structure.EBFixedLenghString"));
                              SPropertyOperations.assign(fixedStr, PROPS.length$ZIZR, size);
                              SPropertyOperations.assign(fixedStr, PROPS.filler$ZJtT, noValue);
                              SPropertyOperations.assign(fixedStr, PROPS.range$t6I$, range);

                              SNode alias = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e2416a06L, "eb_lang.structure.EBImportPrimitive"));
                              SPropertyOperations.assign(alias, PROPS.name$MnvL, name);
                              SLinkOperations.setTarget(alias, LINKS.type$zVeR, fixedStr);

                              ListSequence.fromList(SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW)).addElement(alias);
                            }
                          }


                        } else if (rootType.equals("int")) {
                          String sizeStr = ele.getAttribute("size");
                          if (sizeStr.length() > 0) {
                            int size = Integer.parseInt(sizeStr);
                            String minValue = ele.getAttribute("minValue");
                            String maxValue = ele.getAttribute("maxValue");
                            String noValue = ele.getAttribute("noValue");
                            boolean negative = minValue.startsWith("-");

                            // this node will be replaced later, but we have to provide a node instance
                            SNode typeNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3d15L, "eb_lang.structure.EBChar"));

                            switch (size) {
                              case 1:
                                if (negative) {
                                  typeNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3d14L, "eb_lang.structure.EBInt8"));
                                } else {
                                  typeNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24124b4L, "eb_lang.structure.EBUInt8"));
                                }
                                break;

                              case 2:
                                if (negative) {
                                  typeNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24124aeL, "eb_lang.structure.EBInt16"));
                                } else {
                                  typeNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24124b2L, "eb_lang.structure.EBUInt16"));
                                }
                                break;

                              case 4:
                                if (negative) {
                                  typeNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24124afL, "eb_lang.structure.EBInt32"));
                                } else {
                                  typeNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24124b1L, "eb_lang.structure.EBUInt32"));
                                }
                                break;

                              case 8:
                                if (negative) {
                                  typeNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24124b0L, "eb_lang.structure.EBInt64"));
                                } else {
                                  typeNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24124b3L, "eb_lang.structure.EBUInt64"));
                                }

                                break;
                            }

                            SPropertyOperations.assign(typeNode, PROPS.min$DCVS, minValue);
                            SPropertyOperations.assign(typeNode, PROPS.max$DBZO, maxValue);
                            SPropertyOperations.assign(typeNode, PROPS.noValue$sULd, noValue);
                            // endian is always little endian

                            NodeList validValueList = ele.getChildNodes();
                            if (validValueList.getLength() > 0) {
                              // int enum
                              SNode enumNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3d0dL, "eb_lang.structure.EBEnum"));
                              SLinkOperations.setTarget(enumNode, LINKS.type$_ySl, typeNode);
                              SPropertyOperations.assign(enumNode, PROPS.name$MnvL, name);

                              for (int v = 0; v < validValueList.getLength(); ++v) {
                                if (validValueList.item(v).getNodeType() == Node.ELEMENT_NODE) {
                                  Element valueEle = (Element) validValueList.item(v);
                                  String valueName = valueEle.getAttribute("name");
                                  String valueValue = valueEle.getAttribute("value");
                                  SNode kvPair = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3d1dL, "eb_lang.structure.EBIntKVPair"));
                                  SPropertyOperations.assign(kvPair, PROPS.name$MnvL, valueName);

                                  SNode literal = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3d17L, "eb_lang.structure.EBNumberLiteral"));
                                  SPropertyOperations.assign(literal, PROPS.value$_syU, valueValue);
                                  SLinkOperations.setTarget(kvPair, LINKS.value$_yQp, literal);
                                  ListSequence.fromList(SLinkOperations.getChildren(enumNode, LINKS.values$_zmn)).addElement(kvPair);

                                  ListSequence.fromList(SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW)).addElement(enumNode);
                                }
                              }
                            } else {
                              // int type
                              SNode alias = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e2416a06L, "eb_lang.structure.EBImportPrimitive"));
                              SPropertyOperations.assign(alias, PROPS.name$MnvL, name);
                              SLinkOperations.setTarget(alias, LINKS.type$zVeR, typeNode);

                              ListSequence.fromList(SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW)).addElement(alias);
                            }

                          }


                        } else if (rootType.equals("floatDecimal")) {
                          if (name.equals("float") || name.startsWith("floatDecimal")) {
                            // no need to create float/floatDecimal* type
                            continue;
                          }
                          int size = Integer.parseInt(ele.getAttribute("size"));
                          int precision = Integer.parseInt(ele.getAttribute("precision"));
                          String minValue = ele.getAttribute("minValue");
                          String maxValue = ele.getAttribute("maxValue");
                          String noValue = ele.getAttribute("noValue");

                          SNode floatType = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x1314ce5d5c778a82L, "eb_lang.structure.EBFloatDecimal"));
                          SPropertyOperations.assign(floatType, PROPS.min$l2Xp, minValue);
                          SPropertyOperations.assign(floatType, PROPS.max$l2vn, maxValue);
                          SPropertyOperations.assign(floatType, PROPS.noValue$laGU, noValue);
                          SPropertyOperations.assign(floatType, PROPS.size$l3Es, size);
                          SPropertyOperations.assign(floatType, PROPS.precision$l9xP, precision);

                          SNode alias = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e2416a06L, "eb_lang.structure.EBImportPrimitive"));
                          SPropertyOperations.assign(alias, PROPS.name$MnvL, name);
                          SLinkOperations.setTarget(alias, LINKS.type$zVeR, floatType);

                          ListSequence.fromList(SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW)).addElement(alias);

                        } else if (rootType.equals("data")) {
                          if (name.equals("data")) {
                            // no need to create "data" type
                            continue;
                          }

                          int size = Integer.parseInt(ele.getAttribute("size"));

                          SNode fixedStr = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24124b5L, "eb_lang.structure.EBFixedLenghString"));
                          SPropertyOperations.assign(fixedStr, PROPS.length$ZIZR, size);
                          SPropertyOperations.assign(fixedStr, PROPS.filler$ZJtT, "0x00");
                          SPropertyOperations.assign(fixedStr, PROPS.range$t6I$, "\\x00-\\x255");

                          SNode alias = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e2416a06L, "eb_lang.structure.EBImportPrimitive"));
                          SPropertyOperations.assign(alias, PROPS.name$MnvL, name);
                          SLinkOperations.setTarget(alias, LINKS.type$zVeR, fixedStr);

                          ListSequence.fromList(SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW)).addElement(alias);
                        } else {
                          LoggingRuntime.logMsgView(Level.ERROR, "Unknown rootType: " + rootType, EBProtocol_EditorBuilder_a.class, null, null);
                        }
                      }
                    }
                  }

                  for (int idx = 0; idx < structuresList.getLength(); ++idx) {
                    NodeList structureList = structuresList.item(idx).getChildNodes();

                    Deque<Element> componentList = LinkedListSequence.fromLinkedListNew(new LinkedList<Element>());
                    Deque<Element> msgList = LinkedListSequence.fromLinkedListNew(new LinkedList<Element>());

                    for (int i = 0; i < structureList.getLength(); ++i) {
                      Node structureNode = structureList.item(i);
                      if (structureNode.getNodeType() == Node.ELEMENT_NODE) {
                        Element ele = (Element) structureNode;
                        String type = ele.getAttribute("type");
                        if (type.equals("Sequence") || type.equals("Component")) {
                          LinkedListSequence.fromLinkedListNew(componentList).addElement(ele);
                        } else if (type.equals("Message")) {
                          LinkedListSequence.fromLinkedListNew(msgList).addElement(ele);
                        }
                      }
                    }

                    for (Element e : LinkedListSequence.fromLinkedListNew(msgList)) {
                      LinkedListSequence.fromLinkedListNew(componentList).addElement(e);
                    }

                    for (int i = 0; i < LinkedListSequence.fromLinkedListNew(componentList).count(); ++i) {
                      Element ele = LinkedListSequence.fromLinkedListNew(componentList).getElement(i);
                      SNode message = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e2416a26L, "eb_lang.structure.EBMessage"));
                      String name = ele.getAttribute("name");
                      SPropertyOperations.assign(message, PROPS.name$MnvL, name);
                      NodeList memberList = ele.getChildNodes();
                      for (int j = 0; j < memberList.getLength(); ++j) {
                        if (memberList.item(j).getNodeType() == Node.ELEMENT_NODE) {
                          Element membeEle = (Element) memberList.item(j);
                          final String counter = membeEle.getAttribute("counter");
                          String memberName = membeEle.getAttribute("name");
                          final String memberType = membeEle.getAttribute("type");

                          memberName = Character.toLowerCase(memberName.charAt(0)) + memberName.substring(1);

                          if (counter.isEmpty()) {
                            // non block member
                            SNode member = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e2416a34L, "eb_lang.structure.EBMessageNonBlockMember"));
                            SPropertyOperations.assign(member, PROPS.name$MnvL, memberName);
                            SLinkOperations.setTarget(member, LINKS.type$eiFN, Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW), CONCEPTS.EBTypeStatement$o0)).where(new IWhereFilter<SNode>() {
                              public boolean accept(SNode it) {
                                return SPropertyOperations.getString(it, PROPS.name$MnvL).equals(memberType);
                              }
                            }).first());
                            ListSequence.fromList(SLinkOperations.getChildren(message, LINKS.content$vVwC)).addElement(member);

                          } else {
                            // repeating group block member
                            int cardinality = Integer.parseInt(membeEle.getAttribute("cardinality"));

                            SNode member = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e2416a29L, "eb_lang.structure.EBMessageBlockMember"));
                            SPropertyOperations.assign(member, PROPS.name$MnvL, memberName);
                            SLinkOperations.setTarget(member, LINKS.type$kyUc, Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW), CONCEPTS.EBTypeStatement$o0)).where(new IWhereFilter<SNode>() {
                              public boolean accept(SNode it) {
                                return SPropertyOperations.getString(it, PROPS.name$MnvL).equals(memberType);
                              }
                            }).first());

                            SPropertyOperations.assign(member, PROPS.cardinality$ec$j, cardinality);

                            // force cast counter to EBMessageNonBlockMember
                            SLinkOperations.setTarget(member, LINKS.counter$kzoe, ((SNode) ListSequence.fromList(SLinkOperations.getChildren(message, LINKS.content$vVwC)).findFirst(new IWhereFilter<SNode>() {
                              public boolean accept(SNode it) {
                                return SPropertyOperations.getString(it, PROPS.name$MnvL) == counter;
                              }
                            })));

                            ListSequence.fromList(SLinkOperations.getChildren(message, LINKS.content$vVwC)).addElement(member);

                          }
                        }
                      }
                      ListSequence.fromList(SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW)).addElement(message);
                    }

                  }


                } else if (rootNode.getNodeName() == "sbe:messageSchema") {
                  String version = rootNode.getAttribute("version");
                  String description = rootNode.getAttribute("description");

                  SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW).clear();

                  SNode versionComment = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24169a5L, "eb_lang.structure.EBComment"));
                  SPropertyOperations.assign(versionComment, PROPS.value$wjFT, String.format("EuroNext -- %s version: %s", description, version));
                  ListSequence.fromList(SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW)).addElement(versionComment);
                  ListSequence.fromList(SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW)).addElement(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3cfeL, "eb_lang.structure.EBEmptyStatement")));


                  NodeList dataTypesList = doc.getElementsByTagName("types");
                  assert dataTypesList.getLength() == 1;
                  Node typesNode = dataTypesList.item(0);
                  NodeList typeNodeList = typesNode.getChildNodes();
                  for (int i = 0; i < typeNodeList.getLength(); ++i) {
                    Node typeXMLNode = typeNodeList.item(i);
                    if (typeXMLNode.getNodeType() == Node.ELEMENT_NODE) {
                      Element typeEle = (Element) typeXMLNode;
                      String name = typeEle.getAttribute("name");

                      if (typeXMLNode.getNodeName().equals("type")) {
                        String primitiveType = typeEle.getAttribute("primitiveType");

                        if (primitiveType.startsWith("int") || primitiveType.startsWith("uint")) {
                          String nullValue = typeEle.getAttribute("nullValue");
                          String minValue = typeEle.getAttribute("minValue");
                          String maxValue = typeEle.getAttribute("maxValue");

                          SNode typeASTNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3d14L, "eb_lang.structure.EBInt8"));
                          if (primitiveType.equals("uint8")) {
                            typeASTNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24124b4L, "eb_lang.structure.EBUInt8"));
                          } else if (primitiveType.equals("uint16")) {
                            typeASTNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24124b2L, "eb_lang.structure.EBUInt16"));
                          } else if (primitiveType.equals("uint32")) {
                            typeASTNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24124b1L, "eb_lang.structure.EBUInt32"));
                          } else if (primitiveType.equals("uint64")) {
                            typeASTNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24124b3L, "eb_lang.structure.EBUInt64"));
                          } else if (primitiveType.equals("int8")) {
                            // default value, whatever
                            typeASTNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3d14L, "eb_lang.structure.EBInt8"));
                          } else if (primitiveType.equals("int16")) {
                            typeASTNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24124aeL, "eb_lang.structure.EBInt16"));
                          } else if (primitiveType.equals("int32")) {
                            typeASTNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24124afL, "eb_lang.structure.EBInt32"));
                          } else if (primitiveType.equals("int64")) {
                            typeASTNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24124b0L, "eb_lang.structure.EBInt64"));
                          } else {
                            LoggingRuntime.logMsgView(Level.FATAL, "unknown primitive type: " + primitiveType, EBProtocol_EditorBuilder_a.class, null, null);
                          }

                          SPropertyOperations.assign(typeASTNode, PROPS.min$DCVS, minValue);
                          SPropertyOperations.assign(typeASTNode, PROPS.max$DBZO, maxValue);
                          SPropertyOperations.assign(typeASTNode, PROPS.noValue$sULd, nullValue);

                          SNode alias = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e2416a06L, "eb_lang.structure.EBImportPrimitive"));
                          SPropertyOperations.assign(alias, PROPS.name$MnvL, name);
                          SLinkOperations.setTarget(alias, LINKS.type$zVeR, typeASTNode);

                          ListSequence.fromList(SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW)).addElement(alias);


                        } else if (primitiveType.equals("char")) {
                          String length = typeEle.getAttribute("length");

                          if (length.equals("1")) {
                            // char type
                            SNode typeASTNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3d15L, "eb_lang.structure.EBChar"));
                            SNode alias = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e2416a06L, "eb_lang.structure.EBImportPrimitive"));
                            SPropertyOperations.assign(alias, PROPS.name$MnvL, name);
                            SLinkOperations.setTarget(alias, LINKS.type$zVeR, typeASTNode);
                            ListSequence.fromList(SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW)).addElement(alias);

                          } else {
                            // string type
                            int size = Integer.parseInt(length);

                            SNode fixedStr = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24124b5L, "eb_lang.structure.EBFixedLenghString"));
                            SPropertyOperations.assign(fixedStr, PROPS.length$ZIZR, size);
                            SPropertyOperations.assign(fixedStr, PROPS.filler$ZJtT, "0x00");
                            SPropertyOperations.assign(fixedStr, PROPS.range$t6I$, "\\x00-\\x255");

                            SNode alias = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e2416a06L, "eb_lang.structure.EBImportPrimitive"));
                            SPropertyOperations.assign(alias, PROPS.name$MnvL, name);
                            SLinkOperations.setTarget(alias, LINKS.type$zVeR, fixedStr);

                            ListSequence.fromList(SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW)).addElement(alias);


                          }


                        } else {
                          LoggingRuntime.logMsgView(Level.FATAL, "unknown primitive type: " + primitiveType, EBProtocol_EditorBuilder_a.class, null, null);
                        }


                      } else if (typeXMLNode.getNodeName().equals("composite")) {
                        if (name.equals("messageHeader")) {
                          // create frame 
                          SNode frameMsg = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e2416a26L, "eb_lang.structure.EBMessage"));
                          SPropertyOperations.assign(frameMsg, PROPS.name$MnvL, "MessageFrame");
                          SNode frameMember = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e2416a34L, "eb_lang.structure.EBMessageNonBlockMember"));
                          SPropertyOperations.assign(frameMember, PROPS.name$MnvL, "length");
                          SLinkOperations.setTarget(frameMember, LINKS.type$eiFN, Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW), CONCEPTS.EBTypeStatement$o0)).where(new IWhereFilter<SNode>() {
                            public boolean accept(SNode it) {
                              return SPropertyOperations.getString(it, PROPS.name$MnvL).equals("uint16_t");
                            }
                          }).first());
                          ListSequence.fromList(SLinkOperations.getChildren(frameMsg, LINKS.content$vVwC)).addElement(frameMember);
                          ListSequence.fromList(SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW)).addElement(frameMsg);

                          SNode headerMsg = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e2416a26L, "eb_lang.structure.EBMessage"));
                          SPropertyOperations.assign(headerMsg, PROPS.name$MnvL, "MessageHeader");
                          SLinkOperations.setTarget(headerMsg, LINKS.base$LfNH, frameMsg);
                          NodeList memberList = typeXMLNode.getChildNodes();
                          for (int j = 0; j < memberList.getLength(); ++j) {
                            if (memberList.item(j).getNodeType() == Node.ELEMENT_NODE) {
                              Element membeEle = (Element) memberList.item(j);
                              String memberName = membeEle.getAttribute("name");
                              final Wrappers._T<String> memberType = new Wrappers._T<String>(membeEle.getAttribute("primitiveType"));
                              // uint16 -> uint16_t
                              memberType.value = memberType.value + "_t";

                              SNode member = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e2416a34L, "eb_lang.structure.EBMessageNonBlockMember"));
                              SPropertyOperations.assign(member, PROPS.name$MnvL, memberName);
                              SLinkOperations.setTarget(member, LINKS.type$eiFN, Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW), CONCEPTS.EBTypeStatement$o0)).where(new IWhereFilter<SNode>() {
                                public boolean accept(SNode it) {
                                  return SPropertyOperations.getString(it, PROPS.name$MnvL).equals(memberType.value);
                                }
                              }).first());
                              ListSequence.fromList(SLinkOperations.getChildren(headerMsg, LINKS.content$vVwC)).addElement(member);
                              ListSequence.fromList(SLinkOperations.getChildren(protocolRootASTNode, LINKS.statements$_5KW)).addElement(headerMsg);

                            }

                          }




                        }
                      } else if (typeXMLNode.getNodeName().equals("enum")) {
                      } else if (typeXMLNode.getNodeName().equals("set")) {
                      }






                    }

                  }












                }
              } catch (ParserConfigurationException | IOException | SAXException e) {
                e.printStackTrace();
              }
            }
          };
          getEditorContext().getRepository().getModelAccess().executeCommand(runnable);
        }
      }
    });
    return button;
  }
  private EditorCell createConstant_1() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "");
    editorCell.setCellId("Constant_peo863_c0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_2() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "");
    editorCell.setCellId("Constant_peo863_d0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNodeList_0() {
    AbstractCellListHandler handler = new statementsListHandler_peo863_e0(myNode, getEditorContext());
    EditorCell_Collection editorCell = handler.createCells(new CellLayout_Vertical(), false);
    editorCell.setCellId("refNodeList_statements");
    editorCell.setSRole(handler.getElementSRole());
    return editorCell;
  }
  private static class statementsListHandler_peo863_e0 extends RefNodeListHandler {
    @NotNull
    private SNode myNode;

    public statementsListHandler_peo863_e0(SNode ownerNode, EditorContext context) {
      super(context, false);
      myNode = ownerNode;
    }

    @NotNull
    public SNode getNode() {
      return myNode;
    }
    public SContainmentLink getSLink() {
      return LINKS.statements$_5KW;
    }
    public SAbstractConcept getChildSConcept() {
      return CONCEPTS.EBStatement$nx;
    }
    public SNode createNodeToInsert(EditorContext editorContext) {
      return nodeFactory();
    }

    public SNode nodeFactory() {
      return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3cfeL, "eb_lang.structure.EBEmptyStatement"));
    }
    public EditorCell createNodeCell(SNode elementNode) {
      EditorCell elementCell = getUpdateSession().updateChildNodeCell(elementNode);
      installElementCellActions(elementNode, elementCell, false);
      return elementCell;
    }
    public EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(statementsListHandler_peo863_e0.this.getNode(), LINKS.statements$_5KW));
      try {
        EditorCell emptyCell = null;
        emptyCell = super.createEmptyCell();
        installElementCellActions(null, emptyCell, true);
        setCellContext(emptyCell);
        return emptyCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }

    private static final Object OBJ = new Object();

    public void installElementCellActions(SNode elementNode, EditorCell elementCell, boolean isEmptyCell) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_COMPLETE_SET) == null) {
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_COMPLETE_SET, OBJ);
          elementCell.setSubstituteInfo((isEmptyCell ? new SEmptyContainmentSubstituteInfo(elementCell) : new SChildSubstituteInfo(elementCell)));
        }
      }
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_DELETE_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_DELETE_SET, OBJ);
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.FORWARD));
        }
      }
      if (elementCell.getUserObject(ELEMENT_CELL_BACKSPACE_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(ELEMENT_CELL_BACKSPACE_SET, OBJ);
          elementCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.BACKWARD));
        }
      }
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, OBJ);
        }
      }
    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty value$wjFT = MetaAdapterFactory.getProperty(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24169a5L, 0x726a4e86e24169a8L, "value");
    /*package*/ static final SProperty value$_s5n = MetaAdapterFactory.getProperty(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3d18L, 0x726a4e86e23f3d19L, "value");
    /*package*/ static final SProperty length$ZIZR = MetaAdapterFactory.getProperty(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24124b5L, 0x726a4e86e24124b6L, "length");
    /*package*/ static final SProperty filler$ZJtT = MetaAdapterFactory.getProperty(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24124b5L, 0x726a4e86e24124b8L, "filler");
    /*package*/ static final SProperty range$t6I$ = MetaAdapterFactory.getProperty(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e24124b5L, 0x4fe9a5784793da6aL, "range");
    /*package*/ static final SProperty min$DCVS = MetaAdapterFactory.getProperty(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x78f986b06f13f864L, 0x78f986b06f142298L, "min");
    /*package*/ static final SProperty max$DBZO = MetaAdapterFactory.getProperty(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x78f986b06f13f864L, 0x78f986b06f142294L, "max");
    /*package*/ static final SProperty noValue$sULd = MetaAdapterFactory.getProperty(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x78f986b06f13f864L, 0x1314ce5d5c778a97L, "noValue");
    /*package*/ static final SProperty value$_syU = MetaAdapterFactory.getProperty(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3d17L, 0x726a4e86e23f3d1bL, "value");
    /*package*/ static final SProperty min$l2Xp = MetaAdapterFactory.getProperty(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x1314ce5d5c778a82L, 0x1314ce5d5c778a85L, "min");
    /*package*/ static final SProperty max$l2vn = MetaAdapterFactory.getProperty(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x1314ce5d5c778a82L, 0x1314ce5d5c778a83L, "max");
    /*package*/ static final SProperty noValue$laGU = MetaAdapterFactory.getProperty(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x1314ce5d5c778a82L, 0x1314ce5d5c778a91L, "noValue");
    /*package*/ static final SProperty size$l3Es = MetaAdapterFactory.getProperty(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x1314ce5d5c778a82L, 0x1314ce5d5c778a88L, "size");
    /*package*/ static final SProperty precision$l9xP = MetaAdapterFactory.getProperty(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x1314ce5d5c778a82L, 0x1314ce5d5c778a8cL, "precision");
    /*package*/ static final SProperty cardinality$ec$j = MetaAdapterFactory.getProperty(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e2416a29L, 0x1011af616bfce4dfL, "cardinality");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept PropertyAttribute$Gb = MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da56L, "jetbrains.mps.lang.core.structure.PropertyAttribute");
    /*package*/ static final SConcept EBTypeStatement$o0 = MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3cf3L, "eb_lang.structure.EBTypeStatement");
    /*package*/ static final SConcept EBStatement$nx = MetaAdapterFactory.getConcept(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3cf2L, "eb_lang.structure.EBStatement");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink statements$_5KW = MetaAdapterFactory.getContainmentLink(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3cf6L, 0x726a4e86e23f3cfcL, "statements");
    /*package*/ static final SContainmentLink type$_ySl = MetaAdapterFactory.getContainmentLink(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3d0dL, 0x726a4e86e23f3d22L, "type");
    /*package*/ static final SContainmentLink value$_yQp = MetaAdapterFactory.getContainmentLink(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3d1dL, 0x726a4e86e23f3d20L, "value");
    /*package*/ static final SContainmentLink values$_zmn = MetaAdapterFactory.getContainmentLink(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e23f3d0dL, 0x726a4e86e23f3d24L, "values");
    /*package*/ static final SContainmentLink type$zVeR = MetaAdapterFactory.getContainmentLink(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e2416a06L, 0x726a4e86e2416a07L, "type");
    /*package*/ static final SReferenceLink type$eiFN = MetaAdapterFactory.getReferenceLink(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e2416a34L, 0x5737b24e0c67d176L, "type");
    /*package*/ static final SContainmentLink content$vVwC = MetaAdapterFactory.getContainmentLink(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e2416a26L, 0x7b5896debde675baL, "content");
    /*package*/ static final SReferenceLink type$kyUc = MetaAdapterFactory.getReferenceLink(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e2416a29L, 0x3e338995cb0feb1dL, "type");
    /*package*/ static final SReferenceLink counter$kzoe = MetaAdapterFactory.getReferenceLink(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e2416a29L, 0x3e338995cb0feb1fL, "counter");
    /*package*/ static final SReferenceLink base$LfNH = MetaAdapterFactory.getReferenceLink(0x59242254602f42f3L, 0xab3adc203eb4cc03L, 0x726a4e86e2416a26L, 0x1fd2ea8cbdac6546L, "base");
  }
}
