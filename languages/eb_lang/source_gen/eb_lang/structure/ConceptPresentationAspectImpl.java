package eb_lang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_EBChar;
  private ConceptPresentation props_EBCharLiteral;
  private ConceptPresentation props_EBEmptyStatement;
  private ConceptPresentation props_EBEnum;
  private ConceptPresentation props_EBIIdentifierConcept;
  private ConceptPresentation props_EBInt8;
  private ConceptPresentation props_EBIntLiteral;
  private ConceptPresentation props_EBIntPair;
  private ConceptPresentation props_EBIntType;
  private ConceptPresentation props_EBNumberLiteral;
  private ConceptPresentation props_EBPrimitiveType;
  private ConceptPresentation props_EBProtocol;
  private ConceptPresentation props_EBStatement;
  private ConceptPresentation props_EBTypeStatement;
  private ConceptPresentation props_EBTypeStatementContainer;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.EBChar:
        if (props_EBChar == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("char");
          props_EBChar = cpb.create();
        }
        return props_EBChar;
      case LanguageConceptSwitch.EBCharLiteral:
        if (props_EBCharLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("'");
          props_EBCharLiteral = cpb.create();
        }
        return props_EBCharLiteral;
      case LanguageConceptSwitch.EBEmptyStatement:
        if (props_EBEmptyStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EBEmptyStatement");
          props_EBEmptyStatement = cpb.create();
        }
        return props_EBEmptyStatement;
      case LanguageConceptSwitch.EBEnum:
        if (props_EBEnum == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EBEnum = cpb.create();
        }
        return props_EBEnum;
      case LanguageConceptSwitch.EBIIdentifierConcept:
        if (props_EBIIdentifierConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EBIIdentifierConcept = cpb.create();
        }
        return props_EBIIdentifierConcept;
      case LanguageConceptSwitch.EBInt8:
        if (props_EBInt8 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("int8_t");
          props_EBInt8 = cpb.create();
        }
        return props_EBInt8;
      case LanguageConceptSwitch.EBIntLiteral:
        if (props_EBIntLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EBIntLiteral = cpb.create();
        }
        return props_EBIntLiteral;
      case LanguageConceptSwitch.EBIntPair:
        if (props_EBIntPair == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EBIntPair = cpb.create();
        }
        return props_EBIntPair;
      case LanguageConceptSwitch.EBIntType:
        if (props_EBIntType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EBIntType = cpb.create();
        }
        return props_EBIntType;
      case LanguageConceptSwitch.EBNumberLiteral:
        if (props_EBNumberLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EBNumberLiteral");
          props_EBNumberLiteral = cpb.create();
        }
        return props_EBNumberLiteral;
      case LanguageConceptSwitch.EBPrimitiveType:
        if (props_EBPrimitiveType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EBPrimitiveType = cpb.create();
        }
        return props_EBPrimitiveType;
      case LanguageConceptSwitch.EBProtocol:
        if (props_EBProtocol == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EBProtocol = cpb.create();
        }
        return props_EBProtocol;
      case LanguageConceptSwitch.EBStatement:
        if (props_EBStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EBStatement = cpb.create();
        }
        return props_EBStatement;
      case LanguageConceptSwitch.EBTypeStatement:
        if (props_EBTypeStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EBTypeStatement = cpb.create();
        }
        return props_EBTypeStatement;
      case LanguageConceptSwitch.EBTypeStatementContainer:
        if (props_EBTypeStatementContainer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EBTypeStatementContainer = cpb.create();
        }
        return props_EBTypeStatementContainer;
    }
    return null;
  }
}
